package simpledb;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    private TupleDesc td1;
    private TupleDesc td2;
    private ConcurrentHashMap<Field, ArrayList<Tuple>> child1Hash;
    private ConcurrentLinkedQueue<Tuple> outputBuffer;
    private Tuple t;


    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.td1 = child1.getTupleDesc();
        this.td2 = child2.getTupleDesc();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        int f1 = this.p.getField1();
        return this.td1.getFieldName(f1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int f2 = this.p.getField1();
        return this.td2.getFieldName(f2);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(this.td1, this.td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        child1Hash = new ConcurrentHashMap<>();
        outputBuffer = new ConcurrentLinkedQueue<>();

        while(child1.hasNext()){
            Tuple t1 = child1.next();
            Field f1 = t1.getField(this.p.getField1());
            if (!this.child1Hash.containsKey(f1)){
                this.child1Hash.put(f1, new ArrayList<>());
            }
            this.child1Hash.get(f1).add(t1);
        }
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        // optimize for non-ranged query
        if (!outputBuffer.isEmpty()){
            return outputBuffer.poll();
        }
        if (this.p.getOperator().equals(Predicate.Op.EQUALS)){
            while (child2.hasNext()){
                Tuple t2 = this.child2.next();
                Field f2 = t2.getField(this.p.getField2());
                if (child1Hash.containsKey (f2)){
                    for (Tuple t1:child1Hash.get(f2)){
                        TupleDesc td1 = t1.getTupleDesc();
                        TupleDesc td2 = t2.getTupleDesc();
                        Tuple mergedTuple = new Tuple(TupleDesc.merge(td1, td2));
                        for (int i = 0; i < t1.numFields(); i++){
                            mergedTuple.setField(i, t1.getField(i));
                        }
                        for (int i = 0; i < t2.numFields(); i++){
                            mergedTuple.setField(i + t1.numFields(), t2.getField(i));
                        }
                        outputBuffer.offer(mergedTuple);
                    }
                    return outputBuffer.poll();
                }
            }
        } else {
            while (this.child1.hasNext() || this.t != null) {
                if (this.child1.hasNext() && this.t == null) {
                    this.t = this.child1.next();
                }
                while (this.child2.hasNext()) {
                    Tuple t2 = this.child2.next();
                    if (this.p.filter(t, t2)) {
                        TupleDesc td1 = t.getTupleDesc();
                        TupleDesc td2 = t2.getTupleDesc();
                        TupleDesc newTd = TupleDesc.merge(td1, td2);
                        Tuple newTuple = new Tuple(newTd);
                        newTuple.setRecordId(t.getRecordId());
                        int index = 0;
                        for (int i = 0; i < td1.numFields(); i++)
                            newTuple.setField(index++, t.getField(i));
                        for (int j = 0; j < td2.numFields(); j++)
                            newTuple.setField(index++, t2.getField(j));
                        return newTuple;
                    }
                }
                this.child2.rewind();
                this.t = null;
            }
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{this.child1, this.child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child1 = children[1];
    }

}
